#version 400 core

in vec2 out_texture_coords;
in vec3 surfaceNormal;
in vec3 lightVector;
in vec3 moonVector;
in vec3 toCameraVector;

out vec4 out_color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;

uniform float shineDamper;
uniform float reflectivity;

void main(void) {
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(lightVector);
	
	float product = dot(unitNormal, unitLightVector);
	float brightness = max(product, 0.1);
	vec3 diffuse = (brightness) * lightColor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLight = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLight, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;
	
	
	vec3 unitMoonVector = normalize(moonVector);
	float prod = dot(unitNormal, unitMoonVector);
	float darkness = min(prod, 1.0);
	vec3 temp = darkness * lightColor;
	vec3 diffuseMoon = vec3(1-temp.x,1-temp.y,1-temp.z);
	
	vec3 shadowDirection = -unitMoonVector;
	vec3 reflectedShadow = reflect(shadowDirection, unitNormal);
	
	float moonSpecularFactor = dot(reflectedShadow, unitVectorToCamera);
	moonSpecularFactor = max(moonSpecularFactor, 0.0);
	float moonDampedFactor = pow(moonSpecularFactor, shineDamper);
	vec3 tempSpecular = dampedFactor * reflectivity * lightColor;
	vec3 moonFinalSpecular = vec3(1-tempSpecular.x, 1-tempSpecular.y, 1-tempSpecular.z);
	
	out_color = vec4(diffuseMoon, 1.0) * vec4(diffuse, 1.0) * texture(textureSampler, out_texture_coords);
}